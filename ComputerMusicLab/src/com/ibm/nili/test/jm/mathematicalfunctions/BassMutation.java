package com.ibm.nili.test.jm.mathematicalfunctions;import jm.JMC;import jm.music.data.CPhrase;import jm.music.data.Note;import jm.music.data.Part;import jm.music.data.Phrase;import jm.music.data.Score;import jm.util.View;/** * An example which generates a phrase and then mutates * it every second bar by randomly changing one note *  * @author Andrew Troedson and Andrew Brown */public final class BassMutation implements JMC {    public static void main(String [] args) {        Score s = new Score("BassMutation");        Part p = new Part("Bass", SYNTH_BASS, 1);        Part p2 = new Part("Drums", 25, 9);        Phrase phr = new Phrase();        int compDur = 16; //number of mutations to create (each is played twice)        //bass        int [] pitchSelection = {36, 40, 43, 45, 48, 52, 55, 60, REST, REST, REST};        int pitch;        int noteNumb = 16; //sets the length (number of SQs) of each phrase        //create the initial bass phrase        for (int i = 0; i < noteNumb; i++) {            pitch = pitchSelection[(int)(Math.random() * pitchSelection.length)];            Note note = new Note(pitch, SQ, (int)(Math.random() * 70 + 50));            phr.addNote(note);        }        //the main Bass mutate loop        for (int i = 0; i < compDur; i++) {            //add the new phrase to the part (twice!)            p.addPhrase(phr.copy());            p.addPhrase(phr.copy());            //mutate            Note n = phr.getNote((int)(Math.random() * noteNumb));            n.setPitch(pitchSelection[(int)(Math.random() * pitchSelection.length)]);        }        //drums        for (int i = 0; i < compDur / 4; i++) {            CPhrase drums = MakeParts.drumPattern();            p2.addCPhrase(drums);        }        s.addPart(p);        s.addPart(p2);        // display the score on screen        View.show(s);        //write a MIDI file to disk//        Write.midi(s, "BassMutation.mid");        //View.print(s);    }}